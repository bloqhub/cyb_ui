import React, {    useContext,    useEffect,    useState,} from 'react';import { connect } from 'react-redux';import { useLocation, useHistory, Route } from 'react-router-dom';import { Pane } from '@cybercongress/gravity';import BigNumber from 'bignumber.js';import queryString from 'query-string';import { AppContext } from '../../context';import { CYBER, DEFAULT_GAS_LIMITS, WARP_CONTRACTS } from '../../utils/config';import useSetActiveAddress from '../../hooks/useSetActiveAddress';import txs from '../../utils/txs';import { getPin, getPinsCid, getIpfsGatway, getTxs } from '../../utils/search/utils';import { GasPrice } from '@cosmjs/launchpad';import { Dots, ValueImg, ButtonIcon } from '../../components';import ItemsList from './components/endpoints/items_list';import AddItemForm from './components/endpoints/items_add';import EditItemForm from './components/endpoints/items_edit';import styles from './warp.scss';function WarpEndpoints({ defaultAccount, ipfs, pushIpfsImage, statusChecker, onSelectInputFile}) {    const { jsCyber, keplr } = useContext(AppContext);    const location = useLocation();    const history = useHistory();    const { addressActive } = useSetActiveAddress(defaultAccount);    const [update, setUpdate] = useState(0);    const [editing, setEditing] = useState(false);    const [creating, setCreating] = useState(false);    const [contractData, setContractData] = useState([]);    const [networks, setNetworks] = useState([]);    const [protocols, setProtocols] = useState([]);    const loadNetworksData = (jsCyber, offset) => {        const data = jsCyber.queryContractSmart(            WARP_CONTRACTS.NETWORKS,            {                "get_items": {}            }        );        data.then((result) => {            setNetworks(result.entries);        });    };    const loadProtocolsData = (jsCyber, offset) => {        const data = jsCyber.queryContractSmart(            WARP_CONTRACTS.PROTOCOLS,            {                "get_items": {}            }        );        data.then((result) => {            setProtocols(result.entries);        });    };    const loadContractData = (jsCyber, offset) => {        const data = jsCyber.queryContractSmart(            WARP_CONTRACTS.ENDPOINTS,            {                "get_items": {}            }        );        data.then((result) => {            setContractData(result.entries);        });    };    const getItems = (offset) => {        useEffect(() => {            if (jsCyber === null) {                return;            }            loadContractData(jsCyber);        }, [jsCyber]);        return { contractData };    };    useEffect(() => {        window.scrollTo({top: 0, left: 0, behavior: 'smooth'});    }, [creating, editing]);    const deleteRow = async (id) => {        return new Promise(async (accept, reject) => {            try {                const gasPrice = GasPrice.fromString('0.001boot');                const [{ address }] = await keplr.signer.getAccounts();                const outgoinxTxData = await keplr.execute(                    address,                    WARP_CONTRACTS.ENDPOINTS,                    {                        "DeleteEntry": {                            "id": id                        }                    },                    txs.calculateFee(400000, gasPrice)                );                let txData = await statusChecker(outgoinxTxData.transactionHash);                if (txData.raw_log.indexOf('failed') !== -1) {                    return reject(new Error(txData.raw_log));                }                setTimeout(() => {                    setEditing(false);                    loadContractData(jsCyber);                    accept()                }, 300);            } catch (e) {                reject(e)            }        })    };    const editRow = async (id, data_type, protocol, chain_id, url, particle) => {        return new Promise(async (accept, reject) => {            try {                const gasPrice = GasPrice.fromString('0.001boot');                try {                    const [{ address }] = await keplr.signer.getAccounts();                    let options = { "id": id, };                    if (data_type) {                        options['data_type'] = data_type;                    }                    if (protocol) {                        options['protocol'] = protocol;                    }                    if (chain_id) {                        options['chain_id'] = chain_id;                    }                    if (url) {                        options['url'] = url;                    }                    if (particle) {                        options['particle'] = particle;                    }                    const outgoinxTxData = await keplr.execute(                        address,                        WARP_CONTRACTS.ENDPOINTS,                        {                            "UpdateEntry": options                        },                        txs.calculateFee(400000, gasPrice)                    );                    let txData = await statusChecker(outgoinxTxData.transactionHash);                    if (txData.raw_log.indexOf('failed') !== -1) {                        return reject(new Error(txData.raw_log));                    }                    setTimeout(() => {                        loadContractData(jsCyber);                        setEditing(false);                        accept();                    }, 300);                } catch (e) {                    reject(e);                }            } catch (e) {                reject(e);            }        })    };    const addRow = async (data_type, protocol, chain_id, url, particle) => {        return new Promise(async (accept, reject) => {            try {                const gasPrice = GasPrice.fromString('0.001boot');                const [{ address }] = await keplr.signer.getAccounts();                try {                    let entryData={                        "data_type": data_type,                        "protocol": protocol,                        "chain_id": chain_id,                        "url": url,                    }                    if (particle) {                        entryData["particle"]=particle;                    }                    const outgoinxTxData = await keplr.execute(                        address,                        WARP_CONTRACTS.ENDPOINTS,                        {                            "NewEntry": entryData                        },                        txs.calculateFee(400000, gasPrice)                    );                    let txData = await statusChecker(outgoinxTxData.transactionHash);                    if (txData.raw_log.indexOf('failed') !== -1) {                        return reject(new Error(txData.raw_log));                    }                    setTimeout(() => {                        loadContractData(jsCyber);                        setCreating(false);                        accept();                    }, 300);                } catch (e) {                    reject(e);                }            } catch (e) {                reject(e);            }        })    };    getItems();    useEffect(() => {        if (jsCyber === null) {            return;        }        loadNetworksData(jsCyber);        loadProtocolsData(jsCyber);    }, [jsCyber]);    let content;    content = (        <div style={{ width: "100%" }}>            <h1>Endpoints</h1>            <div>                {editing ? (                    <div>                        <EditItemForm networks={networks} protocols={protocols}  data={editing} onSelectInputFile={onSelectInputFile} editRow={editRow} onCancel={(e) => setEditing(false)}                                      onDelete={deleteRow}/>                    </div>                ) : (creating ? (                        <div>                            <AddItemForm networks={networks} protocols={protocols} addRow={addRow} onSelectInputFile={onSelectInputFile} onCancel={(e) => setCreating(false)}/>                        </div>                    ) : <div></div>                )                }            </div>            <div className={styles.containerWarpFieldsInputContainer}>                <h2>Available Endpoints</h2>                <ItemsList items={contractData} onEdit={(params) => setEditing(params)}/>                <input type="button" className="btn " value="Add new endpoint" onClick={(e) => setCreating(true)}/>            </div>        </div>    );    return (        <>            <main className="block-body">                <Pane                    width="100%"                    display="flex"                    alignItems="center"                    flexDirection="column"                >                    {content}                </Pane>            </main>        </>    );}const mapStateToProps = (store) => {    return {        mobile: store.settings.mobile,        defaultAccount: store.pocket.defaultAccount,        ipfs: store.ipfs.ipfs,    };};export default connect(mapStateToProps)(WarpEndpoints);